import "reflect-metadata";
import { Container } from "typedi";
import { EthereumService } from "../../lib/services/ethereum.service";
import { MOLOCH_1_ABI } from "../../lib/scraping/moloch-1/moloch-1.abi";
import dotenv from "dotenv";
import path from "path";
import _ from "lodash";
import axiosRetry from "axios-retry";
import axios from "axios";
import fs from "fs";
import { sleep } from "../../lib/shared/sleep";

dotenv.config({ path: path.resolve(__dirname, ".env") });
axiosRetry(axios, { retries: 10, retryCondition: () => true, retryDelay: (retryCount, error) => retryCount * 1000 });

const ethereum = Container.get(EthereumService);

const blocks = [
  7218566,
  7221687,
  7221987,
  7225217,
  7225221,
  7225642,
  7233374,
  7233394,
  7233682,
  7238728,
  7238734,
  7241914,
  7250099,
  7250112,
  7250172,
  7250438,
  7254474,
  7254478,
  7254480,
  7276892,
  7281735,
  7287770,
  7287771,
  7287773,
  7287775,
  7291261,
  7295402,
  7295414,
  7298167,
  7298190,
  7312015,
  7312017,
  7319173,
  7319233,
  7320087,
  7331083,
  7331086,
  7331094,
  7331132,
  7331153,
  7331446,
  7333062,
  7333072,
  7336484,
  7337024,
  7337183,
  7339202,
  7340112,
  7349495,
  7351486,
  7351921,
  7351996,
  7352415,
  7352417,
  7352420,
  7352425,
  7352427,
  7357268,
  7362531,
  7362575,
  7362739,
  7364043,
  7368442,
  7368636,
  7383487,
  7389787,
  7396597,
  7396613,
  7396623,
  7408329,
  7413456,
  7435002,
  7435008,
  7435012,
  7435018,
  7435023,
  7435031,
  7435047,
  7445982,
  7446000,
  7453650,
  7453743,
  7453873,
  7457970,
  7460522,
  7460694,
  7464087,
  7464929,
  7465001,
  7465051,
  7465055,
  7465222,
  7465338,
  7465344,
  7467503,
  7467698,
  7474324,
  7477681,
  7477922,
  7478325,
  7478329,
  7489449,
  7490213,
  7494561,
  7494563,
  7499057,
  7509443,
  7511836,
  7517540,
  7523548,
  7526816,
  7526959,
  7528576,
  7530775,
  7531797,
  7532709,
  7537231,
  7548048,
  7549619,
  7549906,
  7550629,
  7550658,
  7550694,
  7551027,
  7554363,
  7555709,
  7555855,
  7556019,
  7556416,
  7557695,
  7558018,
  7560636,
  7561671,
  7570879,
  7570903,
  7573962,
  7574037,
  7574535,
  7574537,
  7586504,
  7589290,
  7602106,
  7650761,
  7653380,
  7653431,
  7653679,
  7659107,
  7659112,
  7664469,
  7664471,
  7664621,
  7679003,
  7679042,
  7684516,
  7684591,
  7685943,
  7702864,
  7709342,
  7709356,
  7709553,
  7709762,
  7715707,
  7715709,
  7715738,
  7721283,
  7722729,
  7722766,
  7727076,
  7727980,
  7733567,
  7733586,
  7733600,
  7733610,
  7733615,
  7733629,
  7733649,
  7733654,
  7733658,
  7733663,
  7734311,
  7734524,
  7734545,
  7734552,
  7734558,
  7734572,
  7736024,
  7740384,
  7740417,
  7743729,
  7743731,
  7743733,
  7743735,
  7743736,
  7743746,
  7745175,
  7745177,
  7745179,
  7745180,
  7745181,
  7745183,
  7745184,
  7745186,
  7745187,
  7745192,
  7745203,
  7746396,
  7746408,
  7746524,
  7751331,
  7751334,
  7751339,
  7751356,
  7751362,
  7751370,
  7751372,
  7751379,
  7751382,
  7751384,
  7751406,
  7751967,
  7751970,
  7751973,
  7751975,
  7751977,
  7751978,
  7751982,
  7751984,
  7753209,
  7753348,
  7753350,
  7753353,
  7753384,
  7753412,
  7753415,
  7753417,
  7753507,
  7753943,
  7754177,
  7754187,
  7754217,
  7754320,
  7754326,
  7754500,
  7754583,
  7755523,
  7755524,
  7755526,
  7761680,
  7765197,
  7765201,
  7765244,
  7765247,
  7765252,
  7765255,
  7765256,
  7765262,
  7765739,
  7766275,
  7766577,
  7766587,
  7766589,
  7766591,
  7766593,
  7766596,
  7766598,
  7766602,
  7766603,
  7766607,
  7766608,
  7768898,
  7771142,
  7771146,
  7771152,
  7775258,
  7785474,
  7786961,
  7791849,
  7791851,
  7793209,
  7798044,
  7798563,
  7807242,
  7811893,
  7813396,
  7813406,
  7813419,
  7813538,
  7813603,
  7815352,
  7815418,
  7815420,
  7817032,
  7817083,
  7821419,
  7821420,
  7823754,
  7825009,
  7825737,
  7825983,
  7826328,
  7827611,
  7828873,
  7830021,
  7830203,
  7831515,
  7832835,
  7834056,
  7835332,
  7836595,
  7837956,
  7838764,
  7838767,
  7839238,
  7840491,
  7841797,
  7842378,
  7845783,
  7848642,
  7849105,
  7849109,
  7849112,
  7849156,
  7849353,
  7850437,
  7850960,
  7850968,
  7850971,
  7850972,
  7851256,
  7851995,
  7857034,
  7858022,
  7860368,
  7862129,
  7868103,
  7868514,
  7869146,
  7869628,
  7869732,
  7871097,
  7871246,
  7872052,
  7872448,
  7875055,
  7875402,
  7876052,
  7876055,
  7876425,
  7876816,
  7880386,
  7880431,
  7880433,
  7881849,
  7881863,
  7883132,
  7883490,
  7883499,
  7886879,
  7887119,
  7887801,
  7887807,
  7888871,
  7889418,
  7889420,
  7889422,
  7890067,
  7890069,
  7891552,
  7895762,
  7900829,
  7900923,
  7900924,
  7901860,
  7902027,
  7902052,
  7902053,
  7902055,
  7902056,
  7902059,
  7902120,
  7902542,
  7903196,
  7904464,
  7906283,
  7907617,
  7907644,
  7907669,
  7907678,
  7907685,
  7907688,
  7907710,
  7907963,
  7908006,
  7908014,
  7908185,
  7914084,
  7914086,
  7914090,
  7914092,
  7914093,
  7914096,
  7914097,
  7914099,
  7915647,
  7919918,
  7921414,
  7928072,
  7932550,
  7932658,
  7933584,
  7935047,
  7938760,
  7946807,
  7946808,
  7950454,
  7961973,
  7963238,
  7978293,
  7978582,
  7979863,
  7981138,
  7982393,
  7991376,
  7997739,
  7998991,
  8000322,
  8001570,
  8002806,
  8009987,
  8018268,
  8024678,
  8038301,
  8081254,
  8081283,
  8081308,
  8081340,
  8087388,
  8092407,
  8094869,
  8094931,
  8113207,
  8113209,
  8113212,
  8113214,
  8113289,
  8113294,
  8113779,
  8114895,
  8115287,
  8115326,
  8115343,
  8116332,
  8116363,
  8119379,
  8119382,
  8119737,
  8124141,
  8124897,
  8125873,
  8125971,
  8138428,
  8156225,
  8169276,
  8170368,
  8170372,
  8170378,
  8170381,
  8170567,
  8170747,
  8173521,
  8174849,
  8176079,
  8176186,
  8176395,
  8176424,
  8176461,
  8176494,
  8176620,
  8176703,
  8177384,
  8182622,
  8182623,
  8182624,
  8182627,
  8182637,
  8182638,
  8182640,
  8182641,
  8182765,
  8182770,
  8182772,
  8182774,
  8182778,
  8182959,
  8182963,
  8182967,
  8182972,
  8182975,
  8182985,
  8184730,
  8184795,
  8189008,
  8189014,
  8189018,
  8189020,
  8189672,
  8189920,
  8192168,
  8194046,
  8194053,
  8194870,
  8194873,
  8194875,
  8194877,
  8194879,
  8194882,
  8194886,
  8195406,
  8201290,
  8201383,
  8201385,
  8201387,
  8201392,
  8201558,
  8201873,
  8201880,
  8201882,
  8201883,
  8201903,
  8201905,
  8201907,
  8201957,
  8201958,
  8202565,
  8203415,
  8203416,
  8203417,
  8203420,
  8207612,
  8207702,
  8207714,
  8207745,
  8208459,
  8208465,
  8208558,
  8208659,
  8208660,
  8208662,
  8208665,
  8208668,
  8208670,
  8208671,
  8208674,
  8208675,
  8208686,
  8208689,
  8208699,
  8208707,
  8209834,
  8209835,
  8209836,
  8215237,
  8215321,
  8216431,
  8216469,
  8220313,
  8220593,
  8221117,
  8224467,
  8224486,
  8224527,
  8230193,
  8234551,
  8234569,
  8239979,
  8244230,
  8261091,
  8262528,
  8263662,
  8266203,
  8266349,
  8267452,
  8268772,
  8271035,
  8272102,
  8272492,
  8273148,
  8273730,
  8277368,
  8288162,
  8307588,
  8318417,
  8347686,
  8347690,
  8347695,
  8348860,
  8350394,
  8359050,
  8361550,
  8361553,
  8361585,
  8361657,
  8361733,
  8362094,
  8362231,
  8362243,
  8362374,
  8362408,
  8362437,
  8362584,
  8362594,
  8362771,
  8364022,
  8370605,
  8370609,
  8370610,
  8377311,
  8377316,
  8377321,
  8383286,
  8383293,
  8383296,
  8383338,
  8383364,
  8388557,
  8389803,
  8395292,
  8395293,
  8395294,
  8395295,
  8395300,
  8395301,
  8395303,
  8401005,
  8402374,
  8408770,
  8408863,
  8410209,
  8414140,
  8417791,
  8440024,
  8441322,
  8442615,
  8452936,
  8453798,
  8454212,
  8455500,
  8456774,
  8458113,
  8459374,
  8460663,
  8470081,
  8470951,
  8471389,
  8472337,
  8472840,
  8478990,
  8480525,
  8484308,
  8491460,
  8492155,
  8496951,
  8504260,
  8504505,
  8509604,
  8511391,
  8514595,
  8515318,
  8516307,
  8517621,
  8517748,
  8522694,
  8524243,
  8524245,
  8533860,
  8533904,
  8533917,
  8534511,
  8535559,
  8542288,
  8542312,
  8542704,
  8544989,
  8548939,
  8554597,
  8555238,
  8560129,
  8563206,
  8567445,
  8576173,
  8582093,
  8588896,
  8596560,
  8600409,
  8612397,
  8613059,
  8613167,
  8618787,
  8618789,
  8618791,
  8618792,
  8618793,
  8619281,
  8619479,
  8644771,
  8666778,
  8685347,
  8731516,
  8731533,
  8731547,
  8785276,
  8788832,
  8802801,
  8802819,
  8803117,
  8804721,
  8804825,
  8809531,
  8810113,
  8810514,
  8825678,
  8827569,
  8828419,
  8838704,
  8842185,
  8842197,
  8846310,
  8875180,
  8891367,
  8930842,
  8936788,
  8958016,
  9015541,
  9017237,
  9017659,
  9024922,
  9033930,
  9036019,
  9041515,
  9041538,
  9041547,
  9062485,
  9096748,
  9097900,
  9109833,
  9112521,
  9122977,
  9126937,
  9128670,
  9137692,
  9142936,
  9151662,
  9155745,
  9193919,
  9196906,
  9208790,
  9209233,
  9210587,
  9216037,
  9222531,
  9234684,
  9235226,
  9235466,
  9253298,
  9254742,
  9260141,
  9270459,
  9273351,
  9274122,
  9278285,
  9278322,
  9288164,
  9288381,
  9289315,
  9289903,
  9289981,
  9290069,
  9293421,
  9293820,
  9293987,
  9293991,
  9295927,
  9298943,
  9302466,
  9328738,
  9328956,
  9328968,
  9332975,
  9332979,
  9335941,
  9345904,
  9352358,
  9354926,
  9366631,
  9367129,
  9380141,
  9381094,
  9381661,
  9382361,
  9391463,
  9399003,
  9399166,
  9399727,
  9400018,
  9400360,
  9401798,
  9404332,
  9410955,
  9411060,
  9411187,
  9411622,
  9411663,
  9420260,
  9430223,
  9439110,
  9443441,
  9444131,
  9444169,
  9444182,
  9444385,
  9457873,
  9490341,
  9495585
];

async function main() {
  const moloch = ethereum.contract(MOLOCH_1_ABI, "0x1fd169A4f5c59ACf79d0Fd5d91D1201EF1Bce9f1");
  const events = await moloch.getPastEvents("allEvents", { fromBlock: 7218566, toBlock: "latest" });
  const allBlocks = events.map(e => e.blockNumber);
  // const blocks = _.sortedUniq(allBlocks);
  // fs.writeFileSync("/Users/ukstv/Desktop/a.json", JSON.stringify(blocks));
  let n = 0;
  for (let b of blocks) {
    const response = await axios.post("http://localhost:3000/block?inplace=true", {
      id: b
    });
    const commands = response.data.commands as any[];
    if (commands.length == 0) {
      console.log(`Empty commands for block ${b}`);
    }
    await sleep(200);
    console.log(`Done with ${n}`);
    n = n + 1;
  }
}

main()
  .then(() => {
    // Do Nothing
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
