service: daoscan
app: daoscan
org: ukstv

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  region: 'us-east-1'
  environment:
    INFURA_PROJECT_ID: '7e19ece913ca433cadb164942a0b3e2e'
    SCRAPING_SQS_URL:
      Ref: ScrapingQueue
    BLOCKS_SQS_URL:
      Ref: BlocksQueue
    ORGANISATIONS_TABLE: ${self:custom.stage}-organisations
    APPLICATIONS_TABLE: ${self:custom.stage}-applications
    PARTICIPANTS_TABLE: ${self:custom.stage}-participants
    PARTICIPANTS_INDEX: by-participant
    BLOCKS_TABLE: ${self:custom.stage}-blocks
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "Fn::GetAtt": [ OrganisationsTable, Arn ]
        - "Fn::GetAtt": [ ApplicationsTable, Arn ]
        - "Fn::GetAtt": [ ParticipantsTable, Arn ]
        - "Fn::GetAtt": [ BlocksTable, Arn ]
        - "Fn::Join": [ "/", [{ "Fn::GetAtt": ["ParticipantsTable", "Arn" ] }, "index", "by-participant"]]
    - Effect: Allow
      Action:
        - sqs:SendMessageBatch
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt:
            - ScrapingQueue
            - Arn
        - Fn::GetAtt:
            - BlocksQueue
            - Arn

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  scraping-tick-block:
    handler: functions/scraping.tickBlock
    events:
      - schedule: rate(1 minute)
  scraping-parse-block:
    handler: functions/scraping.parseBlock
    events:
      - http:
          path: block
          method: post
          cors: true
      - sqs:
          arn:
            Fn::GetAtt:
              - BlocksQueue
              - Arn
  scraping-parse-participants:
    handler: functions/scraping.parseParticipants
    events:
      - http:
          path: update-participants
          method: post
          cors: true
  storage-save-ogranisation-event:
    handler: functions/storage.saveOrganisationEvent
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ScrapingQueue
              - Arn
  storage-read-participants-by-organisation:
    handler: functions/storage.readParticipants
    events:
      - http:
          path: get-participants/{organisationAddress}
          method: get
  storage-read-organisations-by-participant:
    handler: functions/storage.readOrganisations
    events:
      - http:
          path: get-organisations/{participantAddress}
          method: get
  tmp-all-orgs:
    handler: functions/storage.allOrgs
    events:
      - http:
          path: all-orgs
          method: get

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sqs.yml)}
