app: daoscan
service: daoscan
org: ukstv

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    alpha: "alpha.daoscan.net"
    beta: "beta.daoscan.net"
    prod: "api.daoscan.net"
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: ${self:custom.stage}
    createRoute53Record: true

package:
  include:
    - data/*

provider:
  name: aws
  runtime: nodejs12.x
  region: "us-east-1"
  environment:
    ETHEREUM_RPC: "https://mainnet.infura.io/v3/e201ebd046304d9d89a598b6c73baa8c"
    SCRAPING_SQS_URL:
      Ref: ScrapingQueue
    BLOCKS_SQS_URL:
      Ref: BlocksQueue
    STAGE: ${self:custom.stage}
    READ_DATABASE_URL: ${file(resources/${self:custom.stage}.env.yaml):READ_DATABASE_URL}
    WRITE_DATABASE_URL: ${file(resources/${self:custom.stage}.env.yaml):WRITE_DATABASE_URL}
    UTIL_SECRET: ${file(resources/${self:custom.stage}.env.yaml):UTIL_SECRET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessageBatch
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt:
            - ScrapingQueue
            - Arn
        - Fn::GetAtt:
            - BlocksQueue
            - Arn

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

functions:
  scraping-block-tick:
    handler: functions/scraping.blockTick
    concurrency: 0
    events:
      - schedule: rate(1 minute)
      - http:
          path: block/tick
          method: put
  scraping-block-add:
    handler: functions/scraping.blockAdd
    timeout: 300
    concurrency: 1
    events:
      - http:
          path: block
          method: post
      - sqs:
          arn:
            Fn::GetAtt:
              - BlocksQueue
              - Arn
  scraping-block-massAdd:
    handler: functions/scraping.blockMassAdd
    timeout: 300
    concurrency: 1
    events:
      - http:
          path: block/mass
          method: post
  scraping-command-handle:
    handler: functions/scraping.commandHandle
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ScrapingQueue
              - Arn
  util-migration-up:
    handler: functions/util.upMigration
    events:
      - http:
          path: util/migration/up
          method: post
  querying-graphql:
    handler: functions/querying.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

resources:
  - ${file(resources/sqs.yml)}
