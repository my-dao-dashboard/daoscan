service: daoscan
app: daoscan
org: ukstv

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  region: 'us-east-1'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "Fn::GetAtt": [ OrganisationsTable, Arn ]
        - "Fn::GetAtt": [ ApplicationsTable, Arn ]
    - Effect: Allow
      Action:
        - sqs:SendMessageBatch
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt:
            - ScrapingQueue
            - Arn

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  scraping-block:
    handler: functions/scraping.block
    environment:
      INFURA_PROJECT_ID: '7e19ece913ca433cadb164942a0b3e2e'
      SQS_URL:
        Ref: ScrapingQueue
    events:
      - http:
          path: block
          method: post
          cors: true
  storage-save-ogranisation-event:
    handler: functions/storage.saveOrganisationEvent
    environment:
      ORGANISATIONS_TABLE: ${self:custom.stage}-organisations
      APPLICATIONS_TABLE: ${self:custom.stage}-applications
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ScrapingQueue
              - Arn

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sqs.yml)}
