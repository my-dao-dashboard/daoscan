service: daoscan
app: daoscan
org: ukstv

custom:
  stage: ${opt:stage, self:provider.stage}

package:
  include:
    - data/*

provider:
  name: aws
  runtime: nodejs12.x
  region: "us-east-1"
  environment:
    ETHEREUM_RPC: "http://mainnet.eth.daoscan.cc:8545"
    SCRAPING_SQS_URL:
      Ref: ScrapingQueue
    BLOCKS_SQS_URL:
      Ref: BlocksQueue
    ORGANISATIONS_TABLE: ${self:custom.stage}-organisations
    APPLICATIONS_TABLE: ${self:custom.stage}-applications
    APPLICATIONS_PER_ADDRESS_INDEX: byProxyAddress
    PARTICIPANTS_TABLE: ${self:custom.stage}-participants
    PARTICIPANTS_INDEX: by-participant
    BLOCKS_TABLE: ${self:custom.stage}-blocks
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "Fn::GetAtt": [OrganisationsTable, Arn]
        - "Fn::GetAtt": [ApplicationsTable, Arn]
        - "Fn::GetAtt": [ParticipantsTable, Arn]
        - "Fn::GetAtt": [BlocksTable, Arn]
        - "Fn::Join": ["/", [{ "Fn::GetAtt": ["ParticipantsTable", "Arn"] }, "index", "by-participant"]]
        - "Fn::Join": ["/", [{ "Fn::GetAtt": ["ApplicationsTable", "Arn"] }, "index", "byProxyAddress"]]
    - Effect: Allow
      Action:
        - sqs:SendMessageBatch
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt:
            - ScrapingQueue
            - Arn
        - Fn::GetAtt:
            - BlocksQueue
            - Arn

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  scraping-tickBlock:
    handler: functions/scraping.tickBlock
    events:
      - schedule: rate(1 minute)
  scraping-parseBlock:
    handler: functions/scraping.parseBlock
    events:
      - http:
          path: block
          method: post
          cors: true
      - sqs:
          arn:
            Fn::GetAtt:
              - BlocksQueue
              - Arn
  scraping-saveOgranisationEvent:
    handler: functions/scraping.saveOrganisationEvent
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ScrapingQueue
              - Arn
  scraping-parseParticipants:
    handler: functions/scraping.parseParticipants
    events:
      - http:
          path: parse-participants
          method: post
          cors: true
  api-read-participants-by-organisation:
    handler: functions/api.readParticipants
    events:
      - http:
          path: get-participants/{organisationAddress}
          method: get
  api-read-organisations-by-participant:
    handler: functions/api.readOrganisations
    events:
      - http:
          path: get-organisations/{participantAddress}
          method: get
  tmp-all-orgs:
    handler: functions/api.allOrgs
    events:
      - http:
          path: all-orgs
          method: get
  tmpExtendedBlock:
    handler: functions/scraping.readExtendedBlock
    events:
      - http:
          path: extended-block/{id}
          method: get
  api-graphql:
    handler: functions/api.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sqs.yml)}
