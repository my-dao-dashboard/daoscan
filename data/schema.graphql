scalar JSON

enum Decision {
  YES
  NO
  ABSTAIN
}

enum ProposalStatus {
  ACTIVE
  PASS
  REJECT
  ABORT
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Vote {
  createdAt: String
  voter: Participant
  decision: Decision
}

type Participant {
  address: String!
  shares: Token
}

type Token {
  name: String
  symbol: String
  amount: String!
  decimals: Int!
  value(symbol: String!): Token
}

type Proposal {
  index: Int!
  proposer: String!
  createdAt: String
  status: ProposalStatus
  payload: JSON
  votes: [Vote]
}

type ParticipantConnectionEdge {
  node: Participant
  cursor: String
}

type OrganisationParticipantConnection {
  totalCount: Int!
  edges: [ParticipantConnectionEdge]
  pageInfo: PageInfo
}

type Organisation {
  address: String!
  platform: String!
  name: String!
  totalSupply: Token
  bank: [Token]
  participants(first: Int, after: String): OrganisationParticipantConnection
  participant(address: String!): Participant
  proposals: [Proposal]
  proposal(index: Int): Proposal
}

type Account {
  address: String!
  organisations: [Organisation]
}

type GlobalStats {
  lastBlock: Int
  organisationsCount: Int
  participantsCount: Int
  membershipsCount: Int
}

type Query {
  account(address: String!): Account
  organisation(address: String): Organisation
  stats: GlobalStats
}
