type Account {
  address: String!
  organisations: [Organisation]
}

type GlobalStats {
  lastBlock: Int
  membershipsCount: Int
  organisationsCount: Int
  participantsCount: Int
}

type Application {
  name: String!
  address: String!
  appId: String!
}

type Organisation {
  address: String!
  bank: [Token]
  name: String!
  participant(address: String!): Participant
  participants(page: PageQuery): OrganisationParticipantConnection
  applications: [Application]
  platform: String!
  proposal(index: Int): Proposal
  proposals(page: PageQuery): OrganisationProposalConnection
  totalSupply: Token
  createdAt: String!
}

type OrganisationConnectionEdge {
  cursor: String!
  node: Organisation
}

type OrganisationConnection {
  edges: [OrganisationConnectionEdge]
  pageInfo: PageInfo
  totalCount: Int!
}

type OrganisationParticipantConnection {
  edges: [ParticipantConnectionEdge]
  pageInfo: PageInfo
  totalCount: Int!
}

type ProposalConnectionEdge {
  cursor: String
  node: Proposal
}

type OrganisationProposalConnection {
  edges: [ProposalConnectionEdge]
  pageInfo: PageInfo
  totalCount: Int!
}

input PageQuery {
  after: String
  before: String
  first: Int
  last: Int
}

type PageInfo {
  startIndex: Int
  endIndex: Int
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Participant {
  address: String!
  shares: Token
}

type ParticipantConnectionEdge {
  cursor: String
  node: Participant
}

type VoteConnectionEdge {
  cursor: String
  node: Vote
}

type ProposalStats {
  yesVotes: Int
  noVotes: Int
  yesShares: Token
  noShares: Token
}

type ProposalVoteConnection {
  edges: [VoteConnectionEdge]
  pageInfo: PageInfo
  totalCount: Int!
}

type Proposal {
  createdAt: String
  index: Int!
  payload: JSON
  proposer: String!
  status: ProposalStatus
  votes(page: PageQuery): ProposalVoteConnection
  stats: ProposalStats
}

type Query {
  account(address: String!): Account
  organisation(address: String): Organisation
  stats: GlobalStats
  organisations(page: PageQuery): OrganisationConnection
}

type Token {
  amount: String!
  decimals: Int!
  name: String
  symbol: String
  value(symbol: String!): Token
}

type Vote {
  createdAt: String
  decision: Decision
  voter: Participant
}

enum Decision {
  ABSTAIN
  NO
  YES
}

enum ProposalStatus {
  ABORT
  ACTIVE
  PASS
  REJECT
}

scalar JSON
